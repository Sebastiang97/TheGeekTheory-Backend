// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Product {
  id              String @id @default(uuid())
  name            String
  description     String
  price           Int
  size            String
  color           String
  typeStamping    String
  quantity        Int
  subCategoryId   String
  creationDate    DateTime  @default(now())
  updatedAt       DateTime @updatedAt
  subCategory     SubCategory @relation(fields: [subCategoryId], references: [id])
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  urlImage        ProductImage[]
}

model Category {
  id            String @id @default(uuid())
  name          String
  creationDate  DateTime  @default(now())
  updatedAt     DateTime @updatedAt
  subCategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id            String @id @default(uuid())
  name          String
  code          String
  categoryId    String 
  creationDate  DateTime  @default(now())
  updatedAt     DateTime @updatedAt
  category      Category @relation(fields: [categoryId], references: [id])
  products      Product[]
  urlImage      SubCategoryImage[]
}

model Print {
  id              String @id @default(uuid())
  name            String
  author          String
  urlImage        PrintImage[]
}

model PrintImage {
  id         String @id @default(uuid())
  url        String
  isMain  Boolean
  print    Print @relation(fields: [printId], references: [id])
  printId  String
}


model ProductImage {
  id         String @id @default(uuid())
  url        String
  product    Product @relation(fields: [productId], references: [id])
  productId  String
}

model SubCategoryImage {
  id              String @id @default(uuid())
  url             String
  subCategory     SubCategory   @relation(fields: [subCategoryId], references: [id])
  subCategoryId   String
}


model User {
  id                String @id @default(uuid())
  name              String
  firstName         String
  lastName          String
  email             String
  picture           String
  googleId          String
  creationDate      DateTime @default(now())
  updatedAt         DateTime @updatedAt
  role              String @default("USER")
}

model Pay{
  id                String @id @default(uuid())
  paymentId         String 
  description       String 
  amount            Int
  state             String
  payerId           String
  creationDate      DateTime  @default(now())
  updatedAt         DateTime @updatedAt
  payer             Payer @relation(fields: [payerId], references: [id])
  productsPay       ProductPay[]
}

model ProductPay {
  id                 String @id @default(uuid())
  name               String
  description        String
  price              Int
  size               String
  color              String
  typeStamping       String
  quantity           Int
  creationDate       DateTime  @default(now())
  updatedAt          DateTime @updatedAt
  productId          String
  productsPay        Pay? @relation(fields: [payId], references: [id])
  payId              String?
  urlImage           ProductPayImage[]
  printProductPay    PrintProductPay[]
}


model ProductPayImage {
  id            String @id @default(uuid())
  url           String
  productPay    ProductPay @relation(fields: [productPayId], references: [id])
  productPayId  String
}

model PrintProductPay {
  id              String @id @default(uuid())
  name            String
  author          String
  urlImage        PrintProductPayImage[]
  ProductPay      ProductPay? @relation(fields: [productPayId], references: [id])
  productPayId    String?
}

model PrintProductPayImage {
  id                 String @id @default(uuid())
  url                String
  isMain             Boolean
  printProductPay    PrintProductPay @relation(fields: [printProductPayId], references: [id])
  printProductPayId  String
}

model Payer{
  id                String @id @default(uuid())
  name              String
  surname           String
  city              String 
  email             String
  phone             String
  address           String
  zipCode           String
  detailAddress     String
  creationDate      DateTime @default(now())
  updatedAt         DateTime @updatedAt
  payments          Pay[]
}